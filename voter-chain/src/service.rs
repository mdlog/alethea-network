// Copyright (c) Market Resolution Oracle Project
// SPDX-License-Identifier: MIT

#![cfg_attr(target_arch = "wasm32", no_main)]

mod state;

use async_graphql::{EmptySubscription, Object, Request, Response, Schema};
use linera_sdk::{
    graphql::GraphQLMutationRoot,
    linera_base_types::WithServiceAbi,
    views::View,
    Service, ServiceRuntime,
};
use alethea_voter_chain::{VoterChainAbi, VoterOperation};
use std::sync::Arc;

use self::state::VoterState;

pub struct VoterChainService {
    state: Arc<VoterState>,
    runtime: Arc<ServiceRuntime<Self>>,
}

linera_sdk::service!(VoterChainService);

impl WithServiceAbi for VoterChainService {
    type Abi = VoterChainAbi;
}

impl Service for VoterChainService {
    type Parameters = ();

    async fn new(runtime: ServiceRuntime<Self>) -> Self {
        let state = VoterState::load(runtime.root_view_storage_context())
            .await
            .expect("Failed to load state");
        VoterChainService {
            state: Arc::new(state),
            runtime: Arc::new(runtime),
        }
    }

    async fn handle_query(&self, request: Request) -> Response {
        let schema = Schema::build(
            QueryRoot {
                state: self.state.clone(),
            },
            VoterOperation::mutation_root(self.runtime.clone()),
            EmptySubscription,
        )
        .finish();

        schema.execute(request).await
    }
}

struct QueryRoot {
    state: Arc<VoterState>,
}

#[Object]
impl QueryRoot {
    /// Get voter information
    async fn voter_info(&self) -> Option<alethea_voter_chain::VoterInfo> {
        self.state.get_voter_info_sync()
    }
    
    /// Get total stake
    async fn total_stake(&self) -> String {
        self.state.total_stake.get().to_string()
    }
    
    /// Get reputation score
    async fn reputation_score(&self) -> u64 {
        self.state.reputation.get().score
    }
    
    /// Get full reputation data
    async fn reputation(&self) -> alethea_voter_chain::Reputation {
        self.state.reputation.get().clone()
    }
    
    /// Get total votes cast
    async fn total_votes(&self) -> u64 {
        self.state.reputation.get().total_votes
    }
    
    /// Get correct votes count
    async fn correct_votes(&self) -> u64 {
        self.state.reputation.get().correct_votes
    }
    
    /// Get accuracy percentage
    async fn accuracy(&self) -> f64 {
        self.state.reputation.get().accuracy()
    }
    
    /// Get current streak
    async fn streak(&self) -> u64 {
        self.state.reputation.get().streak
    }
    
    /// Get average confidence
    async fn average_confidence(&self) -> u8 {
        self.state.reputation.get().average_confidence
    }
    
    /// Get pending voting requests
    async fn pending_requests(&self) -> Vec<state::VotingRequest> {
        let mut requests = Vec::new();
        
        for market_id in self.state.pending_requests.indices().await.expect("Failed to read indices") {
            if let Some(req) = self.state.pending_requests.get(&market_id).await.expect("Failed to read request") {
                requests.push(req);
            }
        }
        
        requests
    }
    
    /// Get vote history
    async fn vote_history(&self) -> Vec<state::VoteRecord> {
        let mut history = Vec::new();
        
        for market_id in self.state.vote_history.indices().await.expect("Failed to read indices") {
            if let Some(record) = self.state.vote_history.get(&market_id).await.expect("Failed to read record") {
                history.push(record);
            }
        }
        
        history
    }
}

// MutationRoot is now auto-generated by GraphQLMutationRoot derive macro on VoterOperation


// Copyright (c) Market Resolution Oracle Project
// SPDX-License-Identifier: MIT

#![cfg_attr(target_arch = "wasm32", no_main)]

mod state;

use async_graphql::{EmptySubscription, Object, Request, Response, Schema};
use linera_sdk::{
    graphql::GraphQLMutationRoot,
    linera_base_types::{AccountOwner, WithServiceAbi},
    views::View,
    Service, ServiceRuntime,
};
use alethea_market_chain::{MarketChainAbi, MarketOperation};
use std::sync::Arc;

use self::state::MarketState;

pub struct MarketChainService {
    state: Arc<MarketState>,
    runtime: Arc<ServiceRuntime<Self>>,
}

linera_sdk::service!(MarketChainService);

impl WithServiceAbi for MarketChainService {
    type Abi = MarketChainAbi;
}

impl Service for MarketChainService {
    type Parameters = ();

    async fn new(runtime: ServiceRuntime<Self>) -> Self {
        let state = MarketState::load(runtime.root_view_storage_context())
            .await
            .expect("Failed to load state");
        MarketChainService {
            state: Arc::new(state),
            runtime: Arc::new(runtime),
        }
    }

    async fn handle_query(&self, request: Request) -> Response {
        let schema = Schema::build(
            QueryRoot {
                state: self.state.clone(),
            },
            MarketOperation::mutation_root(self.runtime.clone()),
            EmptySubscription,
        )
        .finish();

        schema.execute(request).await
    }
}

struct QueryRoot {
    state: Arc<MarketState>,
}

#[Object]
impl QueryRoot {
    /// Get next market ID
    async fn next_market_id(&self) -> u64 {
        *self.state.next_market_id.get()
    }
    
    /// Get market by ID
    async fn market(&self, id: u64) -> Option<state::Market> {
        self.state.get_market(id).await
    }
    
    /// Get all markets
    async fn markets(&self) -> Vec<state::Market> {
        let mut result = Vec::new();
        let count = *self.state.next_market_id.get();
        
        for i in 0..count {
            if let Some(market) = self.state.get_market(i).await {
                result.push(market);
            }
        }
        
        result
    }
    
    /// Get position for a market and owner
    async fn position(&self, market_id: u64, owner: AccountOwner) -> Option<state::Position> {
        self.state.get_position(market_id, &owner).await
    }
}

// MutationRoot is now auto-generated by GraphQLMutationRoot derive macro on MarketOperation

